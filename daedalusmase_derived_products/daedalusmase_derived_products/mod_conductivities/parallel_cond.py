"""
**sub_heating_sources.parallel_cond**

**Description**:
_____________________________________________________________________________________________________________________

Calculate parallel conductivity in S/m

$$\\sigma_\\parallel=N_e\\frac{e^2}{\\nu_{en}m_e}$$
_____________________________________________________________________________________________________________________
_____________________________________________________________________________________________________________________

**Inputs**:
_____________________________________________________________________________________________________________________

`Ne`: electron density in \(cm^{-3}\)

`B`: Magnetic field vector in T

`Te`: Electron temperature in K

`NO2`: O2 density in \(cm^{-3}\)

`NN2`: N2 density in \(cm^{-3}\)

`NO`: O density in \(cm^{-3}\)


_____________________________________________________________________________________________________________________
_______________________________________________________________________________________________________________________

**Outputs**:
_____________________________________________________________________________________________________________________

`sigma0`: parallel conductivity in S/m
_____________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________

**Reference**:
_____________________________________________________________________________________________________________________

Schunk, R. and Nagy, A. (2009). Ionospheres: physics, plasma physics, and chemistry (Cambridge
university press)
______________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________

"""


import numpy as np
from daedalusmase_derived_products.mod_tiegcm_utils import const

def parallel_cond(Ne,B,Te,NO2,NN2,NO):

    bnorm = np.sqrt(B[0] * B[0] + B[1] * B[1] + B[2] * B[2])

    bgauss=bnorm*10000
    qeomeo10=1.7588028*10**7
    
    omega_e=qeomeo10*bgauss
    omega_e_inv=1/omega_e
    
  
    
    ven=(2.33 * (10**(-11))*NN2*Te*(1-(1.21*(10**(-4)*Te))) \
        + 1.82 * (10**(-10))*NO2*np.sqrt(Te)*(1+(3.6*(10**(-2)*np.sqrt(Te)))) \
        +8.9 * (10**(-11))*NO*np.sqrt(Te)*(1+(5.7*(10**(-4)*Te))))
    
    ve_n2=2.33 * (10**(-11))*NN2*Te*(1-(1.21*(10**(-4)*Te)))
    ve_o=8.9 * (10**(-11))*NO*np.sqrt(Te)*(1+(5.7*(10**(-4)*Te)))
    ve_o2=1.82 * (10**(-10))*NO2*np.sqrt(Te)*(1+(3.6*(10**(-2)*np.sqrt(Te))))
    # ve_he=4.6* (10**(-10))*helium_f*np.sqrt(Te)
    
    rnu_ne=(2.33 * (10**(-11))*NN2*Te*(1-(1.21*(10**(-4)*Te))) \
        + 1.82 * (10**(-10))*NO2*np.sqrt(Te)*(1+(3.6*(10**(-2)*np.sqrt(Te)))) \
        +8.9 * (10**(-11))*NO*np.sqrt(Te)*(1+(5.7*(10**(-4)*Te))))*omega_e_inv
    rnu_ne=4*rnu_ne

      
    ########################################################################
#                   Conductivities
    ########################################################################                
    
    #Parallel conductivity
    sigma0=(Ne*const.electron*const.electron)/(const.me*ven)

    return sigma0